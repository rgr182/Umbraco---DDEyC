@using Umbraco.Cms.Web.Common.PublishedModels;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    var authApiLogout = Configuration["ApiSettings:AuthApiLogout"];
    var authApiCheckSession = Configuration["ApiSettings:AuthApiCheckSession"];
}

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link href="~/Styles/logoutButton.css" rel="stylesheet" />
</head>

<body>
    <div class="baseButton">
        <button class="logoutButton btn btn-primary btn-lg p-1" onclick="logout()">
            <i class="bi bi-power fs-2 fw-bold"></i>
        </button>
    </div>
  
    <script>
        // Check if we're using cookies (either in prod or explicitly preferred)
        const preferCookies = document.cookie.includes('prefer-cookies') || window.location.hostname !== 'localhost';
        
        // Function to get the authentication token
        function getAuthToken() {
            if (preferCookies) {
                // We don't need to manually get the cookie value as it's handled by the backend
                return true; // Just return true to indicate we have authentication
            } else {
                const authToken = JSON.parse(localStorage.getItem('authToken'));
                return authToken?.token;
            }
        }

        // Function to check token expiration
        function checkTokenExpiration() {
            if (!preferCookies) {
                const authToken = JSON.parse(localStorage.getItem('authToken'));
                if (authToken?.expiration) {
                    const currentTime = new Date().getTime();
                    const expirationTime = new Date(authToken.expiration).getTime();
                    if (currentTime > expirationTime) {
                        logout();
                    }
                }
            }
        }

        // Set up periodic token check
        setInterval(checkTokenExpiration, 15 * 60 * 1000);
        checkTokenExpiration();

        // Function to logout
        async function logout() {
            const token = getAuthToken();
            if (!token) return;

            try {
                const headers = preferCookies 
                    ? { 'Content-Type': 'application/json' }
                    : {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    };

                const response = await fetch('@authApiLogout', {
                    method: 'POST',
                    headers: headers,
                    credentials: preferCookies ? 'include' : 'same-origin'
                });

                if (response.ok) {
                    if (!preferCookies) {
                        localStorage.removeItem('authToken');
                    }
                    window.location.href = '/loginpage/';
                } else {
                    console.error('Logout failed:', response.status);
                }
            } catch (error) {
                console.error('Error during logout:', error);
            }
        }
    </script>
</body>