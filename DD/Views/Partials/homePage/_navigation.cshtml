@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    Layout = null;
    var rootNode = Umbraco.ContentAtRoot().FirstOrDefault();
    IEnumerable<IPublishedContent> GetVisibleChildren(IPublishedContent node)
    {
        return node.Children().Where(x => x.IsVisible());
    }
    IEnumerable<IPublishedContent> GetVisibleDescendants(IPublishedContent node)
    {
        return GetVisibleChildren(node).Concat(GetVisibleChildren(node).SelectMany(GetVisibleDescendants));
    }
    var allVisiblePages = GetVisibleDescendants(rootNode);
    var navigationConfig = Configuration.GetSection("Navigation");
    var hasChildLinks = navigationConfig.Get<List<string>>();
}
<!DOCTYPE html>
<html>
<head>
    @await Html.PartialAsync("~/Views/Partials/_metaData.cshtml")
    <link rel="stylesheet" href="~/Styles/navigation.css" />
</head>
<body>
    <nav id="navigation">
        <div>
            <a id="open-menu"><i id="bars" class="fas fa-bars"></i></a>
            <ul>
                @if (allVisiblePages != null && allVisiblePages.Any())
                {
                    foreach (var item in allVisiblePages)
                    {
                        if (hasChildLinks.Contains(item.Name))
                        {
                            <li class="has-dropdown">
                                <a class="parent-link" href="@item.Url()">@item.Name</a>
                                <button class="dropdown-arrow fas fa-chevron-down"></button>
                                <ul class="dropdown">
                                    @foreach (var childLink in item.Children())
                                    {
                                        var visibleGrandChildren = childLink.Children().Where(x => x.IsVisible());
                                        <li class="has-subdropdown">
                                            <a class="parent-link" href="@childLink.Url()">@childLink.Name</a>
                                            @if (visibleGrandChildren.Any())
                                            {
                                                <button class="dropdown-arrow fas fa-chevron-down"></button>
                                                <ul class="sub-dropdown">
                                                    @foreach (var grandChildLink in visibleGrandChildren)
                                                    {
                                                        <li>
                                                            <a href="@grandChildLink.Url()">@grandChildLink.Name</a>
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    }
                }
            </ul>
        </div>
    </nav>
    <script src="~/Scripts/mobileMenuToggle.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var parentLinks = document.querySelectorAll('.parent-link');
            parentLinks.forEach(function (link) {
                link.addEventListener('click', function (event) {
                    event.preventDefault(); // Evita la navegación
                    var dropdown = link.nextElementSibling; // Encuentra el siguiente elemento de dropdown
                    if (dropdown && dropdown.classList.contains('dropdown')) {
                        dropdown.classList.toggle('open'); // Muestra/oculta el dropdown
                    }
                });
            });
        });
    </script>
</body>
</html>