@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IHomeRedirectButtonProperties>
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment

@{
    const string defaultColor = "#0077b6";
    const string defaultTextColor = "#ffffff";

    var buttonColor = Model.HomeRedirectButtonColor ?? defaultColor;
    var buttonTextColor = Model.HomeRedirectButtonTextColor ?? defaultTextColor;

    var validateSessionUrl = Configuration["ApiSettings:ValidateSessionUrl"];
    var loginPageUrl = Configuration["AppSettings:LoginPageRoute"] ?? "/loginpage";
    var authApiBaseUrl = Configuration["ApiSettings:AuthApiUrl"];
}

@if (!Model.HideHomeRedirectButton)
{
    <a id="homeRedirectButton" href="javascript:void(0)" class="btn btn-primary btn-lg home-redirect-button fixed-size-button"
       style="background-color: @buttonColor; color: @buttonTextColor;">
        @Model.HomeRedirectButtonText
    </a>
}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const button = document.getElementById('homeRedirectButton');
        if (!button) return;

        // Store the original button text
        const defaultButtonText = button.textContent;

        // Reset button state when page becomes visible again (back navigation)
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                button.textContent = defaultButtonText;
                button.disabled = false;
            }
        });

        // Reset button state when navigating back
        window.addEventListener('pageshow', (event) => {
            if (event.persisted) {
                button.textContent = defaultButtonText;
                button.disabled = false;
            }
        });

        button.addEventListener('click', async () => {
            try {
                // Add loading state to button
                const originalText = button.textContent;
                button.textContent = 'Verificando...';
                button.disabled = true;

                const isProd = '@(HostingEnvironment.EnvironmentName.ToString().ToLower()=="production")' === 'true';
                const preferCookies = document.cookie.includes('prefer-cookies') || isProd;

                let token = null;
                if (!preferCookies) {
                    // Only try to get token from localStorage if not using cookies
                    const authData = localStorage.getItem('authToken');
                    if (authData) {
                        const parsed = JSON.parse(authData);
                        token = parsed.token;
                    }
                }

                // If using cookies or no token found in localStorage, validate session directly
                if (preferCookies || !token) {
                    try {
                        const response = await fetch('@validateSessionUrl', {
                            method: 'GET',
                            credentials: 'include' // Important: Include cookies in the request
                        });

                        if (!response.ok) {
                            if (response.status === 401) {
                                window.location.href = '@loginPageUrl';
                            } else {
                                throw new Error('Error validating session');
                            }
                            return;
                        }

                        // Session is valid, redirect
                        window.location.href = '@Model.HomeRedirectButtonUrl?.Url';
                        return;
                    } catch (error) {
                        console.error('Error validating session:', error);
                        throw error; // Re-throw to be caught by outer catch block
                    }
                }

                // If we're here, we're using localStorage token
                const response = await fetch('@validateSessionUrl', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '@loginPageUrl';
                    } else {
                        throw new Error('Error validating session');
                    }
                    return;
                }

                // Session is valid, redirect
                
                window.location.href = '@Model.HomeRedirectButtonUrl?.Url';

            } catch (error) {
                console.error('Error during authentication check:', error);
                
                // Reset button state
                button.textContent = originalText;
                button.disabled = false;

                // Show error message
                const errorMessage = document.createElement('div');
                errorMessage.className = 'alert alert-danger mt-2';
                errorMessage.textContent = 'Error al verificar la sesiÃ³n. Por favor, intente nuevamente.';
                button.parentNode.insertBefore(errorMessage, button.nextSibling);

                // Remove error message after 3 seconds
                setTimeout(() => {
                    errorMessage.remove();
                }, 3000);
            }
        });
    });
</script>