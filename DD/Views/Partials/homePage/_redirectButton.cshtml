@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IHomeRedirectButtonProperties>
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    const string defaultColor = "#0077b6";
    const string defaultTextColor = "#ffffff";

    var buttonColor = Model.HomeRedirectButtonColor ?? defaultColor;
    var buttonTextColor = Model.HomeRedirectButtonTextColor ?? defaultTextColor;

    // Retrieve the ValidateSessionUrl from appsettings.json
    var validateSessionUrl = Configuration["ApiSettings:ValidateSessionUrl"];


    
    const string loginPageUrl = "/loginpage";
}

@if (!Model.HideHomeRedirectButton)
{
    <a id="homeRedirectButton" href="javascript:void(0)" class="btn btn-primary btn-lg home-redirect-button fixed-size-button"
       style="background-color: @buttonColor; color: @buttonTextColor;">
        @Model.HomeRedirectButtonText
    </a>
}

<script>
    document.getElementById('homeRedirectButton').addEventListener('click', function () {
        const authToken = localStorage.getItem('authToken'); // Get the token string from localStorage

        if (!authToken) {

            window.location.href = '@loginPageUrl'; // Redirect to login page if there is no token
            return;
        }

        let token;
        try {
            const parsedToken = JSON.parse(authToken); // Attempt to parse the token
            token = parsedToken.token; // Get the token property
        } catch (e) {


            window.location.href = '@loginPageUrl'; // Redirect to login page if parsing fails
            return;
        }

        if (!token) {

            window.location.href = '@loginPageUrl'; // Redirect to login page if there is no token
            return;
        }

        // Use the URL from Razor to make a request to the backend to validate the token
        fetch('@validateSessionUrl', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
        .then(response => {

            if (response.ok) {
                return response.json(); // If the response is valid
            } else if (response.status === 401) {
                throw new Error('Sesion invalida o expirada');
            } else {
                throw new Error('Error en la validacion del token');
            }
        })
        .then(data => {

            if (data.Message) {

            } else {

            }
            window.location.href = '@Model.HomeRedirectButtonUrl?.Url'; // Redirect to chatbot if the token is valid, change this later
        })
        .catch(error => {


            window.location.href = '@loginPageUrl'; // Redirect to login page
        });
    });
</script>
