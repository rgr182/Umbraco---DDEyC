@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IHomeRedirectButtonProperties>
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    const string defaultColor = "#0077b6";
    const string defaultTextColor = "#ffffff";

    var buttonColor = Model.HomeRedirectButtonColor ?? defaultColor;
    var buttonTextColor = Model.HomeRedirectButtonTextColor ?? defaultTextColor;

    // Retrieve the ValidateSessionUrl from appsettings.json
    var validateSessionUrl = Configuration["ApiSettings:ValidateSessionUrl"];
    var loginPageUrl = Configuration["AppSettings:LoginPageRoute"] ?? "/loginpage";
    var authApiBaseUrl = Configuration["ApiSettings:AuthApiUrl"];
}

@if (!Model.HideHomeRedirectButton)
{
    <a id="homeRedirectButton" href="javascript:void(0)" class="btn btn-primary btn-lg home-redirect-button fixed-size-button"
       style="background-color: @buttonColor; color: @buttonTextColor;">
        @Model.HomeRedirectButtonText
    </a>
}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize AppSettings if not already done
        window.AppSettings = window.AppSettings || {
            AuthApiUrl: '@authApiBaseUrl'
        };

        const button = document.getElementById('homeRedirectButton');
        if (!button) return;

        button.addEventListener('click', async () => {
            try {
                const isAuthenticated = await window.authHandler.checkAuth();
                
                if (!isAuthenticated) {
                    console.log('No valid authentication found, redirecting to login');
                    window.location.href = '@loginPageUrl';
                    return;
                }

                // Add loading state to button
                const originalText = button.textContent;
                button.textContent = 'Verificando...';
                button.disabled = true;

                // Double-check session with backend
                const response = await fetch('@validateSessionUrl', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${window.authHandler.getToken()}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        console.log('Session expired, redirecting to login');
                        window.location.href = '@loginPageUrl';
                    } else {
                        throw new Error('Error validating session');
                    }
                    return;
                }

                // Session is valid, proceed with redirect
                window.location.href = '@Model.HomeRedirectButtonUrl?.Url';
            } catch (error) {
                console.error('Error during authentication check:', error);
                
                // Reset button state
                button.textContent = originalText;
                button.disabled = false;

                // Show error message
                const errorMessage = document.createElement('div');
                errorMessage.className = 'alert alert-danger mt-2';
                errorMessage.textContent = 'Error al verificar la sesiÃ³n. Por favor, intente nuevamente.';
                button.parentNode.insertBefore(errorMessage, button.nextSibling);

                // Remove error message after 3 seconds
                setTimeout(() => {
                    errorMessage.remove();
                }, 3000);
            }
        });
    });
</script>