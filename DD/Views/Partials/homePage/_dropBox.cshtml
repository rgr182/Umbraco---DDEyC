@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ISearchComboProperties>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models.PublishedContent;
@using Umbraco.Cms.Web.Common.PublishedModels;
@{
    Layout = null;
    var Hide = Model.HideSearchComboContents;
    var uniqueId = Guid.NewGuid().ToString().Replace("-", "");
    var blocksList = Model.SearchComboContents.ToList();
    var defaultText = Model.DefaultSearchComboText ?? "Selecciona una opción";
    var ComboBox1Title = Model.ComboBox1Title ?? "Quién eres?";
    var ComboBox2Title = Model.ComboBox2Title ?? "Qué buscas?";
    var ComboBox3Title = Model.ComboBox3Title ?? "Respuestas disponibles";

    var data = new
    {
        blocksList = blocksList.Select(b => new
        {
            content = b?.Content is ComboBoxUserType userType ? new
            {
                ComboBoxUserName = userType.ComboBoxUserName?.ToString(),
                ComboBoxUserMatches = userType.ComboBoxUserMatches?.Select(matchContent =>
                {
                    var match = matchContent?.Content as ComboBoxMatchElement;
                    return new
                    {
                        ComboBoxMatchElementText = match?.ComboBoxMatchElementText?.ToString(),
                        ComboBoxMatchElementUrl = match?.ComboBoxMatchElementUrl?.Select(block =>
                        {
                            var ComboBoxDropdown3 = block.Content;
                            return new
                            {
                                ComboBoxThirdUrl = ComboBoxDropdown3?.comboBoxThirdURL?.Url
                            };
                        }).Where(x => x.ComboBoxThirdUrl != null).ToList(),
                        ComboBoxPreferences = match?.ComboBoxPreferences?.Select(preference =>
                        {
                            return new
                            {
                                PreferenceText = preference.PreferenceText?.ToString(),
                                PreferenceValue = preference.PreferenceValue?.ToString()
                            };
                        }).ToList()
                    };
                }).ToList()
            } : null
        }).Where(b => b != null)
    };
    var json = Json.Serialize(data);
}

<!DOCTYPE html>
<html>
<head>
    @await Html.PartialAsync("~/Views/Partials/_metaData.cshtml")
    <link rel="stylesheet" href="~/Styles/dropbox.css" />
    <script src="~/Scripts/searchCombo.js"></script>
</head>
@if (!Hide)
{
    <body>
        <div class="DropboxContainer">
            <label class="title">@Model.ComboBox1Title</label>
            <select id="parent-dropdown-@uniqueId" class="dropboxItem">
                <option selected>@defaultText</option>
                @foreach (var item in Model.SearchComboContents)
                {
                    if (item.Content is ComboBoxUserType userType)
                    {
                        <option value="@userType.ComboBoxUserName">@userType.ComboBoxUserName</option>
                    }
                }
            </select>

            <label class="title">@Model.ComboBox2Title</label>
            <select id="child-dropdown-@uniqueId" class="dropboxItem">
                <option selected>@defaultText</option>
            </select>

            <label class="title">@Model.ComboBox3Title</label>
            <select id="child-dropdown-@uniqueId" class="dropboxItem">
                <option selected>@defaultText</option>
            </select>

            <a id="search-icon-@uniqueId" href="#" class="searchButton"><i class="fas fa-search"></i></a>
        </div>
    </body>
}
<script>
    const DefaultText = '@defaultText';
    const uniqueId = '@uniqueId';
    const searchComboContents = JSON.parse('@Html.Raw(json)');
    initSearchCombo(uniqueId, searchComboContents, DefaultText);
</script>
</html>